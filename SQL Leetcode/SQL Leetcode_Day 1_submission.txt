Day 1_LeetCode SQL_Submission Student: Fahad Ahmad

Q183. Customers Who Never Order: 
Write an SQL query to report all customers who never order anything.

drop table if exists Customers;
drop table if exists Orders;
create table Customers (Id int, Name varchar(100));
Create table Orders (Id int, CustomerId int);
insert into Customers (Id, Name) values
	(1,'Joe'),
        (2,'Henry'),
        (3,'Sam'),
        (4,'Max');
insert into Orders (Id, CustomerId) values
	(1,3),
        (2,1);

Answer:
-used subquery including JOIN

Select name as Customers from Customers
WHERE name NOT IN (Select name as Customer from Customers
JOIN Orders ON (Customers.id = Orders.customerId)
ORDER BY Orders.customerId Asc)

*Q534
Write an SQL query that reports for each player and date, how many games played so far by the player. That is, the total number of games played by the player until that date. Check the example for clarity.
create table Activity (player_id int, device_id int, event_date date, games_played int);
insert into Activity(player_id, device_id, event_date, games_played) values
(1, 2, '2016-03-01',5),
(1, 2, '2016-05-02',6),
(1, 3, '2017-06-25',1),
(3, 1, '2016-03-02',0),
(3, 4, '2018-07-03',5);

Answer:
-Joined table with itself, as want earlier date with later date, to get sum and use group by
Select b.player_id, b.event_date, SUM(a.games_played) as 'games played'
From Activity a
JOIN Activity b ON a.player_id = b.player_id and a.event_date <= b.event_date
GROUP BY b.player_id, b.event_date


Q185
A company's executives are interested in seeing who earns the most money in each of the company's departments. A high earner in a department is an employee who has a salary in the top three unique salaries for that department.
Write an SQL query to find the employees who are high earners in each of the departments.

create table Employee (Id int, Name varchar(100), Salary int, DepartmentId int);
create table Department (Id int, Name varchar(100));
insert into Employee (Id, Name, Salary, DepartmentId) values
(1,'Joe',85000,1),
(2,'Henry',80000,2),
(3,'Sam',60000,2),
(4,'Max',90000,1),
(5,'Janet',69000,1),
(6,'Randy',85000,1),
(7,'Will',70000,1);
insert into Department (Id, Name) values
(1,'IT'),
(2,'Sales');

Answer:Used Window function for inner query of subquery
Dense Rank as normal Rank function ignores tied ranks.
Select d.name as Department, a.Name as Employee, a.Salary 
FROM (Select e.*, DENSE_RANK() OVER(Partition by departmentId Order by Salary Desc) as DeptPayRank
FROM Employee e) a
JOIN department d ON (a.departmentID = d.id)
WHERE DeptPayRank <= 3
Order by d.name ASC, a.Salary desc